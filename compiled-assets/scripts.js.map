{"version":3,"file":"scripts.js","mappings":"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","sources":["webpack://lilliputten-11ty-site/./src/scripts/VisualAnimation/conf.ts","webpack://lilliputten-11ty-site/./src/scripts/navigation.ts","webpack://lilliputten-11ty-site/./src/scripts/VisualAnimation/VisualAnimation.ts","webpack://lilliputten-11ty-site/./src/scripts/scripts.ts","webpack://lilliputten-11ty-site/./src/scripts/toggleTheme/toggleTheme.ts"],"sourcesContent":["import { TConf } from './TConf';\n\nexport const conf: TConf = {\n  el: 'VisualAnimation',\n  wrapperEl: 'PageVisual',\n\n  fov: 70, // 75,\n  cameraZ: 100, // 75,\n  xyCoef: 250, // 50,\n  zCoef: 15, // 10,\n  lightIntensity: 1, // 0.9,\n\n  ambientColor: '#cc2200', // '#00ff00', // 0x000000,\n\n  /*\n   * // Default colors (convert from hex color string: s/'#\\(.*\\)'/0x\\1/)\n   * light1Color: '#0e09dc',\n   * light2Color: '#1cd1e1',\n   * light3Color: '#18c02c',\n   * light4Color: '#ee3bcf',\n   */\n  // Set 1\n  light1Color: '#4b9e89',\n  light2Color: '#5c75a1',\n  light3Color: '#1418cd',\n  light4Color: '#b9caec',\n};\n","let updateVisualizationCallback: () => void;\n\n/* // Compare width (from css variables):\n * $screenSmMin: map.get($grid-breakpoints, 'sm'); // 576\n * $screenMdMin: map.get($grid-breakpoints, 'md'); // 768\n * $screenLgMin: map.get($grid-breakpoints, 'lg'); // 992\n * $screenXlMin: map.get($grid-breakpoints, 'xl'); // 1200\n * $screenXxlMin: map.get($grid-breakpoints, 'xxl'); // 1400\n */\nconst maxMobileWidth = 768;\n\nfunction updateShowNavigation() {\n  const { body } = document;\n  const navbarContent = document.getElementById('navbarNavigation');\n  const showNavbarContent = navbarContent?.classList.contains('show');\n  const docWidth = document.documentElement.clientWidth;\n  // Compare width (from css variables):\n  const mobileView = docWidth < maxMobileWidth;\n  const showNavigation = mobileView && showNavbarContent;\n  // TODO: To use local variable if no `navbarContent` is available?\n  body.classList.toggle('mobileView', mobileView);\n  body.classList.toggle('wideView', !mobileView);\n  body.classList.toggle('showNavigation', showNavigation);\n  if (updateVisualizationCallback) {\n    updateVisualizationCallback();\n  }\n}\n\nexport function setUpdateVisualizationCallback(cb: () => void) {\n  updateVisualizationCallback = cb;\n  updateShowNavigation();\n}\n\nfunction createCb(delay: number) {\n  return requestAnimationFrame.bind(null, setTimeout.bind(null, updateShowNavigation, delay));\n}\n\nexport function initNavigation() {\n  const button = document.getElementById('toggleNavigation');\n  // NOTE: Temporarily solution to avoid a big delay for mobile classes update (repeat checks with diferent delays)\n  // TODO: To provide more decent solution\n  const cb1 = createCb(100);\n  const cb2 = createCb(500);\n  const cb3 = createCb(700);\n  if (button) {\n    button?.addEventListener('click', () => {\n      cb1();\n      cb2();\n      cb3();\n    });\n  }\n  window.addEventListener('resize', updateShowNavigation, false);\n  updateShowNavigation();\n}\n","/**\n * @module VisualAnimation\n * @changed 2024.06.14, 13:06\n */\n\nimport {\n  Mesh,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  WebGLRenderer,\n  // Camera,\n  // Object3D,\n} from 'three';\n\nimport { TConf, TColor } from './TConf';\nimport { conf } from './conf';\n\nexport interface TVisualAnimationParams {\n  setUpdateVisualizationCallback?: (updateVisualizationCallback: () => void) => void;\n}\n\nconst useInteractve = false;\n\nfunction startVisualAnimation(conf: TConf, params: TVisualAnimationParams) {\n  const { setUpdateVisualizationCallback } = params;\n\n  const THREE = window.THREE;\n\n  let renderer: WebGLRenderer;\n  let scene: Scene;\n  let camera: PerspectiveCamera;\n  // let cameraCtrl;\n  let width: number;\n  let height: number;\n  // let cx: number;\n  // let cy: number;\n  let wWidth: number;\n  let wHeight: number;\n\n  // const ThreeMath = THREE.Math;\n\n  let plane: Mesh; // : Object3D;\n\n  // @ts-ignore: Wrong type definitions for simplex noise\n  const simplex = new window.SimplexNoise();\n\n  const mouse = new THREE.Vector2();\n  const mousePlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n  // const mousePosition = new THREE.Vector3();\n  // const raycaster = new THREE.Raycaster();\n\n  let light1: PointLight;\n  let light2: PointLight;\n  let light3: PointLight;\n  let light4: PointLight;\n\n  const canvas = document.getElementById(conf.el) as HTMLCanvasElement;\n  const wrapper = document.getElementById(conf.wrapperEl) as HTMLDivElement;\n\n  init();\n\n  function init() {\n    // console.log('[VisualAnimation:init]');\n    renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true,\n      alpha: true,\n    });\n    camera = new THREE.PerspectiveCamera(conf.fov);\n    camera.position.z = conf.cameraZ;\n\n    updateSize();\n    window.addEventListener('resize', updateSize, false);\n\n    if (setUpdateVisualizationCallback) {\n      setUpdateVisualizationCallback(updateSize);\n    }\n\n    if (useInteractve) {\n      document.addEventListener('mousemove', mouseHandler);\n    }\n\n    initScene();\n    // initGui();\n    animate();\n  }\n\n  function mouseHandler(e: MouseEvent) {\n    const v = new THREE.Vector3();\n    camera.getWorldDirection(v);\n    v.normalize();\n    mousePlane.normal = v;\n    mouse.x = (e.clientX / width) * 2 - 1;\n    mouse.y = -(e.clientY / height) * 2 + 1;\n    // raycaster.setFromCamera(mouse, camera);\n    // raycaster.ray.intersectPlane(mousePlane, mousePosition);\n  }\n\n  /* // UNUSED: Input controls\n   * function initGui() {\n   *   noiseInput.value = 101 - conf.xyCoef;\n   *   heightInput.value = (conf.zCoef * 100) / 25;\n   *   // Noise Coef input\n   *   noiseInput.addEventListener('input', (e) => {\n   *     conf.xyCoef = 101 - noiseInput.value;\n   *   });\n   *   // Height Coef input\n   *   heightInput.addEventListener('input', (e) => {\n   *     conf.zCoef = (heightInput.value * 25) / 100;\n   *   });\n   *   // Random colors\n   *   document.getElementById('trigger').addEventListener('click', (e) => {\n   *     setRandomLightsColors();\n   *   });\n   * }\n   */\n\n  function numericColor(s: TColor): number {\n    if (typeof s === 'string') {\n      if (s.startsWith('#')) {\n        s = s.replace('#', '0x');\n      }\n      s = Number(s);\n    }\n    return s;\n  }\n\n  function addLight(color: TColor, lightDistance: number, x: number, y: number, z: number) {\n    const light = new THREE.PointLight(\n      // prettier-ignore\n      numericColor(color),\n      conf.lightIntensity,\n      lightDistance,\n    );\n    light.position.set(x, y, z);\n    scene.add(light);\n    return light;\n  }\n\n  function initScene() {\n    scene = new THREE.Scene();\n    initLights();\n\n    const mat = new THREE.MeshLambertMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n    // let mat = new THREE.MeshPhongMaterial({ color: 0xffffff });\n    // let mat = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\n    const geo = new THREE.PlaneBufferGeometry(wWidth, wHeight, wWidth / 2, wHeight / 2);\n    plane = new THREE.Mesh(geo, mat);\n    scene.add(plane);\n\n    const planeRotationX = -Math.PI / 2 - 0.1; // -Math.PI / 2 - 0.2;\n    const planePositionY = 20; // -25;\n    const cameraPositionZ = 30; // 60;\n    plane.rotation.x = planeRotationX;\n    plane.position.y = planePositionY;\n    camera.position.z = cameraPositionZ;\n    /* console.log('[VisualAnimation:initScene]', {\n     *   planeRotationX,\n     *   planePositionY,\n     *   cameraPositionZ,\n     * });\n     */\n  }\n\n  function initLights() {\n    const r = 30; // 30;\n    const y = 10; // 10;\n    const lightDistance = 300; // 500;\n\n    const light = new THREE.AmbientLight(numericColor(conf.ambientColor));\n    scene.add(light);\n\n    light1 = addLight(conf.light1Color, lightDistance, 0, y, r); // Set 1\n    // light2 = addLight(conf.light2Color, lightDistance, 0, -y, -r);\n    light3 = addLight(conf.light3Color, lightDistance, r, y, 0); // Set 1\n    // light4 = addLight(conf.light4Color, lightDistance, -r, y, 0);\n  }\n\n  function animate() {\n    // console.log('[VisualAnimation:animate]');\n\n    animatePlane();\n    animateLights();\n\n    renderer.render(scene, camera);\n\n    // setTimeout(() => requestAnimationFrame(animate), 10);\n    requestAnimationFrame(animate);\n  }\n\n  function animatePlane() {\n    const gArray = plane.geometry.attributes.position.array as number[];\n    const time = Date.now() * 0.0002;\n    /* console.log('[VisualAnimation:animatePlane]', {\n     *   gArray,\n     *   time,\n     * });\n     */\n    for (let i = 0; i < gArray.length; i += 3) {\n      gArray[i + 2] =\n        simplex.noise4D(\n          // prettier-ignore\n          gArray[i] / conf.xyCoef,\n          gArray[i + 1] / conf.xyCoef,\n          time,\n          mouse.x + mouse.y,\n        ) * conf.zCoef;\n    }\n    plane.geometry.attributes.position.needsUpdate = true;\n    // plane.geometry.computeBoundingSphere();\n  }\n\n  function animateLights() {\n    const time = Date.now() * 0.001;\n    const d = 50;\n    if (light1) {\n      light1.position.x = Math.sin(time * 0.1) * d;\n      light1.position.z = Math.cos(time * 0.2) * d;\n    }\n    if (light2) {\n      light2.position.x = Math.cos(time * 0.3) * d;\n      light2.position.z = Math.sin(time * 0.4) * d;\n    }\n    if (light3) {\n      light3.position.x = Math.sin(time * 0.5) * d;\n      light3.position.z = Math.sin(time * 0.6) * d;\n    }\n    if (light4) {\n      light4.position.x = Math.sin(time * 0.7) * d;\n      light4.position.z = Math.cos(time * 0.8) * d;\n    }\n  }\n\n  /* [>* Create random colors <]\n   * function setRandomLightsColors() {\n   *   conf.light1Color = window.chroma.random().hex();\n   *   conf.light2Color = window.chroma.random().hex();\n   *   conf.light3Color = window.chroma.random().hex();\n   *   conf.light4Color = window.chroma.random().hex();\n   *   light1.color = new THREE.Color(conf.light1Color);\n   *   light2.color = new THREE.Color(conf.light2Color);\n   *   light3.color = new THREE.Color(conf.light3Color);\n   *   light4.color = new THREE.Color(conf.light4Color);\n   *   // console.log(conf);\n   * }\n   */\n\n  function updateSize() {\n    const elWidth = wrapper.clientWidth;\n    const elHeight = wrapper.clientHeight;\n    width = elWidth;\n    height = elHeight; // Math.min(Math.max(elHeight, minHeight), maxHeight);\n    if (renderer && camera) {\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      const wsize = getRendererSize();\n      wWidth = wsize[0];\n      wHeight = wsize[1];\n    }\n  }\n\n  function getRendererSize() {\n    const cam = new THREE.PerspectiveCamera(camera.fov, camera.aspect);\n    const vFOV = (cam.fov * Math.PI) / 180;\n    const height = 2 * Math.tan(vFOV / 2) * Math.abs(conf.cameraZ);\n    const width = height * cam.aspect;\n    return [width, height];\n  }\n}\n\nexport function VisualAnimation(params: TVisualAnimationParams) {\n  startVisualAnimation(conf, params);\n}\n","/**\n * @desc Main js entry point module (scripts)\n * @module src/assets/scripts.ts\n * @changed 2024.06.15, 15:50\n */\n\nimport './sw/sw';\n\nimport { VisualAnimation } from './VisualAnimation/VisualAnimation';\nimport { toggleTheme } from './toggleTheme/toggleTheme';\nimport { initNavigation, setUpdateVisualizationCallback } from './navigation';\n\n// import { test } from './test/test';\n\n/*\n * const testResult = test();\n * console.log('[scripts] Main client code entry point', {\n *   test,\n *   testResult,\n *   // 'window.SimplexNoise': window.SimplexNoise,\n *   // 'window.createNoise4D': window.createNoise4D,\n * });\n */\n\nVisualAnimation({ setUpdateVisualizationCallback });\n\ninitNavigation();\n\nwindow.toggleTheme = toggleTheme;\n\n// updateTheme();\n\n// Empty root module\nexport {};\n","export function toggleTheme() {\n  const body = window.document.body;\n  const html = body && (body.parentNode as THTMLNode);\n  const currTheme = html.dataset\n    ? html.dataset.theme\n    : html.getAttribute\n      ? html.getAttribute('theme')\n      : '';\n  const theme = !currTheme || currTheme === 'light' ? 'dark' : 'light';\n  /* console.log('[themes:toggleTheme]', {\n   *   currTheme,\n   *   theme,\n   *   body,\n   * });\n   */\n  if (theme && html) {\n    if (html.setAttribute) {\n      html.setAttribute('data-theme', theme);\n    } else if (html.dataset) {\n      html.dataset.theme = theme;\n    }\n  }\n  if (window.localStorage) {\n    window.localStorage.setItem('theme', theme);\n  }\n}\n"],"names":["updateVisualizationCallback","useInteractve","startVisualAnimation","conf","params","renderer","scene","camera","width","height","wWidth","wHeight","plane","light1","light2","light3","light4","setUpdateVisualizationCallback","THREE","window","simplex","SimplexNoise","mouse","Vector2","mousePlane","Plane","Vector3","canvas","document","getElementById","el","wrapper","wrapperEl","mouseHandler","e","v","getWorldDirection","normalize","normal","x","clientX","y","clientY","numericColor","s","startsWith","replace","Number","addLight","color","lightDistance","z","light","PointLight","lightIntensity","position","set","add","animate","gArray","geometry","attributes","array","time","Date","now","i","length","noise4D","xyCoef","zCoef","needsUpdate","animatePlane","d","Math","sin","cos","animateLights","render","requestAnimationFrame","updateSize","elWidth","clientWidth","elHeight","clientHeight","setSize","aspect","updateProjectionMatrix","wsize","cam","PerspectiveCamera","fov","vFOV","PI","tan","abs","cameraZ","getRendererSize","WebGLRenderer","antialias","alpha","addEventListener","Scene","r","AmbientLight","ambientColor","light1Color","light3Color","mat","MeshLambertMaterial","side","DoubleSide","geo","PlaneBufferGeometry","Mesh","planeRotationX","planePositionY","cameraPositionZ","rotation","initScene","init","button","cb1","cb2","cb3","maxMobileWidth","updateShowNavigation","body","navbarContent","showNavbarContent","classList","contains","mobileView","documentElement","showNavigation","toggle","createCb","delay","bind","setTimeout","light2Color","light4Color","cb","toggleTheme","html","parentNode","currTheme","dataset","theme","getAttribute","setAttribute","localStorage","setItem"],"sourceRoot":""}
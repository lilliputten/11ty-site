{"version":3,"file":"scripts.js","mappings":"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","sources":["webpack://lilliputten-11ty-site/./src/scripts/scripts.ts","webpack://lilliputten-11ty-site/./src/scripts/visualAnimation/visualAnimation.ts","webpack://lilliputten-11ty-site/./src/scripts/visualAnimation/conf.ts"],"sourcesContent":["/**\n * @desc Main js entry point module (scripts)\n * @module src/assets/scripts.ts\n * @changed 2024.06.15, 15:50\n */\n\nimport './sw/sw';\n\n// import { test } from './test/test';\n\nimport { visualAnimation } from './visualAnimation/visualAnimation';\n\n/*\n * const testResult = test();\n * console.log('[scripts] Main client code entry point', {\n *   test,\n *   testResult,\n *   // 'window.SimplexNoise': window.SimplexNoise,\n *   // 'window.createNoise4D': window.createNoise4D,\n * });\n */\n\n// Start animation only on main window?\nif (window.isIndex) {\n  visualAnimation();\n}\n\n// Empty root module\nexport {};\n","/**\n * @module visualAnimation\n * @changed 2024.06.14, 13:06\n */\n\nimport {\n  Mesh,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  WebGLRenderer,\n  // Camera,\n  // Object3D,\n} from 'three';\n\nimport { TConf, TColor } from './TConf';\nimport { conf } from './conf';\n\nfunction App(conf: TConf) {\n  const THREE = window.THREE;\n\n  let renderer: WebGLRenderer;\n  let scene: Scene;\n  let camera: PerspectiveCamera;\n  // let cameraCtrl;\n  let width: number;\n  let height: number;\n  // let cx: number;\n  // let cy: number;\n  let wWidth: number;\n  let wHeight: number;\n\n  // const TMath = THREE.Math;\n\n  let plane: Mesh; // : Object3D;\n\n  // const SimplexNoiseClass = window.SimplexNoise as SimplexNoise;\n  // @ts-ignore: Wrong type definitions for simplex noise\n  const simplex = new window.SimplexNoise();\n  // const noise4D = createNoise4D();\n\n  const mouse = new THREE.Vector2();\n  const mousePlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n  const mousePosition = new THREE.Vector3();\n  const raycaster = new THREE.Raycaster();\n\n  /* // UNUSED: Input controls\n   * //  <input type=\"range\" min=\"1\" max=\"100\" class=\"custom-range\" id=\"noiseInput\">\n   * const noiseInput = document.getElementById('noiseInput');\n   * // <input type=\"range\" min=\"1\" max=\"100\" class=\"custom-range\" id=\"heightInput\">\n   * const heightInput = document.getElementById('heightInput');\n   */\n\n  let light1: PointLight;\n  let light2: PointLight;\n  let light3: PointLight;\n  let light4: PointLight;\n\n  init();\n\n  function init() {\n    console.log('[visualAnimation:init]');\n    const canvas = document.getElementById(conf.el) as HTMLCanvasElement;\n    renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true,\n      alpha: true,\n    });\n    camera = new THREE.PerspectiveCamera(conf.fov);\n    camera.position.z = conf.cameraZ;\n\n    updateSize();\n    window.addEventListener('resize', updateSize, false);\n\n    // document.addEventListener('mousemove', mouseHandler);\n\n    initScene();\n    // initGui();\n    animate();\n  }\n\n  function mouseHandler(e: MouseEvent) {\n    const v = new THREE.Vector3();\n    camera.getWorldDirection(v);\n    v.normalize();\n    mousePlane.normal = v;\n    mouse.x = (e.clientX / width) * 2 - 1;\n    mouse.y = -(e.clientY / height) * 2 + 1;\n    // raycaster.setFromCamera(mouse, camera);\n    // raycaster.ray.intersectPlane(mousePlane, mousePosition);\n  }\n\n  /* // UNUSED: Input controls\n   * function initGui() {\n   *   noiseInput.value = 101 - conf.xyCoef;\n   *   heightInput.value = (conf.zCoef * 100) / 25;\n   *   // Noise Coef input\n   *   noiseInput.addEventListener('input', (e) => {\n   *     conf.xyCoef = 101 - noiseInput.value;\n   *   });\n   *   // Height Coef input\n   *   heightInput.addEventListener('input', (e) => {\n   *     conf.zCoef = (heightInput.value * 25) / 100;\n   *   });\n   *   // Random colors\n   *   document.getElementById('trigger').addEventListener('click', (e) => {\n   *     updateLightsColors();\n   *   });\n   * }\n   */\n\n  function numericColor(s: TColor): number {\n    if (typeof s === 'string') {\n      if (s.startsWith('#')) {\n        s = s.replace('#', '0x');\n      }\n      s = Number(s);\n    }\n    return s;\n  }\n\n  function addLight(color: TColor, lightDistance: number, x: number, y: number, z: number) {\n    const light = new THREE.PointLight(\n      // prettier-ignore\n      numericColor(color),\n      conf.lightIntensity,\n      lightDistance,\n    );\n    light.position.set(x, y, z);\n    scene.add(light);\n    return light;\n  }\n\n  function initScene() {\n    scene = new THREE.Scene();\n    initLights();\n\n    const mat = new THREE.MeshLambertMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n    // let mat = new THREE.MeshPhongMaterial({ color: 0xffffff });\n    // let mat = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\n    const geo = new THREE.PlaneBufferGeometry(wWidth, wHeight, wWidth / 2, wHeight / 2);\n    plane = new THREE.Mesh(geo, mat);\n    scene.add(plane);\n\n    const planeRotationX = -Math.PI / 2 - 0.2; // -Math.PI / 2 - 0.2;\n    const planePositionY = -25; // -25;\n    const cameraPositionZ = 60; // 60;\n    plane.rotation.x = planeRotationX;\n    plane.position.y = planePositionY;\n    camera.position.z = cameraPositionZ;\n    console.log('[visualAnimation:initScene]', {\n      planeRotationX,\n      planePositionY,\n      cameraPositionZ,\n    });\n  }\n\n  function initLights() {\n    const r = 30; // 30;\n    const y = 10; // 10;\n    const lightDistance = 800; // 500;\n\n    const light = new THREE.AmbientLight(numericColor(conf.ambientColor));\n    scene.add(light);\n\n    /* // UNUSED: Original light adding code...\n     * // light1\n     * light1 = new THREE.PointLight(\n     *   numericColor(conf.light1Color),\n     *   conf.lightIntensity,\n     *   lightDistance,\n     * );\n     * light1.position.set(0, y, r);\n     * scene.add(light1);\n     *\n     * // light2\n     * light2 = new THREE.PointLight(\n     *   numericColor(conf.light2Color),\n     *   conf.lightIntensity,\n     *   lightDistance,\n     * );\n     * light2.position.set(0, -y, -r);\n     * scene.add(light2);\n     *\n     * // light3\n     * light3 = new THREE.PointLight(\n     *   numericColor(conf.light3Color),\n     *   conf.lightIntensity,\n     *   lightDistance,\n     * );\n     * light3.position.set(r, y, 0);\n     * scene.add(light3);\n     *\n     * // light4\n     * light4 = new THREE.PointLight(\n     *   numericColor(conf.light4Color),\n     *   conf.lightIntensity,\n     *   lightDistance,\n     * );\n     * light4.position.set(-r, y, 0);\n     * scene.add(light4);\n     */\n\n    // light1 = addLight(conf.light1Color, lightDistance, 0, y, r);\n    // light2 = addLight(conf.light2Color, lightDistance, 0, -y, -r);\n    light3 = addLight(conf.light3Color, lightDistance, r, y, 0);\n    light4 = addLight(conf.light4Color, lightDistance, -r, y, 0);\n  }\n\n  function animate() {\n    // console.log('[visualAnimation:animate]');\n    requestAnimationFrame(animate);\n\n    animatePlane();\n    // animateLights();\n\n    renderer.render(scene, camera);\n  }\n\n  function animatePlane() {\n    const gArray = plane.geometry.attributes.position.array as number[];\n    const time = Date.now() * 0.0002;\n    /* console.log('[visualAnimation:animatePlane]', {\n     *   gArray,\n     *   time,\n     * });\n     */\n    for (let i = 0; i < gArray.length; i += 3) {\n      gArray[i + 2] =\n        simplex.noise4D(\n          // prettier-ignore\n          gArray[i] / conf.xyCoef,\n          gArray[i + 1] / conf.xyCoef,\n          time,\n          mouse.x + mouse.y,\n        ) * conf.zCoef;\n    }\n    plane.geometry.attributes.position.needsUpdate = true;\n    // plane.geometry.computeBoundingSphere();\n  }\n\n  function animateLights() {\n    const time = Date.now() * 0.001;\n    const d = 50;\n    if (light1) {\n      light1.position.x = Math.sin(time * 0.1) * d;\n      light1.position.z = Math.cos(time * 0.2) * d;\n    }\n    if (light2) {\n      light2.position.x = Math.cos(time * 0.3) * d;\n      light2.position.z = Math.sin(time * 0.4) * d;\n    }\n    if (light3) {\n      light3.position.x = Math.sin(time * 0.5) * d;\n      light3.position.z = Math.sin(time * 0.6) * d;\n    }\n    if (light4) {\n      light4.position.x = Math.sin(time * 0.7) * d;\n      light4.position.z = Math.cos(time * 0.8) * d;\n    }\n  }\n\n  /** Create random colors */\n  function updateLightsColors() {\n    conf.light1Color = window.chroma.random().hex();\n    conf.light2Color = window.chroma.random().hex();\n    conf.light3Color = window.chroma.random().hex();\n    conf.light4Color = window.chroma.random().hex();\n    light1.color = new THREE.Color(conf.light1Color);\n    light2.color = new THREE.Color(conf.light2Color);\n    light3.color = new THREE.Color(conf.light3Color);\n    light4.color = new THREE.Color(conf.light4Color);\n    // console.log(conf);\n  }\n\n  function updateSize() {\n    width = window.innerWidth;\n    // cx = width / 2;\n    height = window.innerHeight;\n    // cy = height / 2;\n    if (renderer && camera) {\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      const wsize = getRendererSize();\n      wWidth = wsize[0];\n      wHeight = wsize[1];\n    }\n  }\n\n  function getRendererSize() {\n    const cam = new THREE.PerspectiveCamera(camera.fov, camera.aspect);\n    const vFOV = (cam.fov * Math.PI) / 180;\n    const height = 2 * Math.tan(vFOV / 2) * Math.abs(conf.cameraZ);\n    const width = height * cam.aspect;\n    return [width, height];\n  }\n}\n\nexport function visualAnimation() {\n  /* console.log('[visualAnimation]', {\n   *   isDev: window.isDev,\n   *   THREE: window.THREE,\n   *   SimplexNoise: window.SimplexNoise,\n   *   chroma: window.chroma,\n   *   App,\n   *   conf,\n   * });\n   */\n  App(conf);\n}\n","import { TConf, TColor } from './TConf';\n\nexport const conf: TConf = {\n  el: 'visualAnimation',\n\n  fov: 75, // 5,\n  cameraZ: 75, // 5,\n  xyCoef: 50, // 0,\n  zCoef: 10, // 0,\n  lightIntensity: 0.9, // 9,\n\n  ambientColor: '#cc2200', // '#00ff00', // 0x000000,\n\n  /*\n   * // Default colors (convert from hex color string: s/'#\\(.*\\)'/0x\\1/)\n   * light1Color: '#0e09dc',\n   * light2Color: '#1cd1e1',\n   * light3Color: '#18c02c',\n   * light4Color: '#ee3bcf',\n   */\n  // Set 1\n  light1Color: '#4b9e89',\n  light2Color: '#5c75a1',\n  light3Color: '#1418cd',\n  light4Color: '#b9caec',\n};\n"],"names":["window","isIndex","conf","renderer","scene","camera","width","height","wWidth","wHeight","plane","THREE","simplex","SimplexNoise","mouse","Vector2","numericColor","s","startsWith","replace","Number","addLight","color","lightDistance","x","y","z","light","PointLight","lightIntensity","position","set","add","animate","requestAnimationFrame","gArray","geometry","attributes","array","time","Date","now","i","length","noise4D","xyCoef","zCoef","needsUpdate","animatePlane","render","updateSize","innerWidth","innerHeight","setSize","aspect","updateProjectionMatrix","wsize","cam","PerspectiveCamera","fov","vFOV","Math","PI","tan","abs","cameraZ","getRendererSize","Plane","Vector3","Raycaster","console","log","canvas","document","getElementById","el","WebGLRenderer","antialias","alpha","addEventListener","Scene","AmbientLight","ambientColor","light3Color","light4Color","mat","MeshLambertMaterial","side","DoubleSide","geo","PlaneBufferGeometry","Mesh","planeRotationX","rotation","planePositionY","cameraPositionZ","initScene","init","App","light1Color","light2Color"],"sourceRoot":""}
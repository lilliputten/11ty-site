{"version":3,"file":"scripts.js","mappings":"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","sources":["webpack://lilliputten-11ty-site/./src/scripts/VisualAnimation/VisualAnimation.ts","webpack://lilliputten-11ty-site/./src/scripts/VisualAnimation/conf.ts"],"sourcesContent":["/**\n * @module VisualAnimation\n * @changed 2024.06.14, 13:06\n */\n\nimport {\n  Mesh,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  WebGLRenderer,\n  // Camera,\n  // Object3D,\n} from 'three';\n\nimport { TConf, TColor } from './TConf';\nimport { conf } from './conf';\n\nconst useInteractve = false;\n\nfunction startVisualAnimation(conf: TConf) {\n  const THREE = window.THREE;\n\n  let renderer: WebGLRenderer;\n  let scene: Scene;\n  let camera: PerspectiveCamera;\n  // let cameraCtrl;\n  let width: number;\n  let height: number;\n  // let cx: number;\n  // let cy: number;\n  let wWidth: number;\n  let wHeight: number;\n\n  // const ThreeMath = THREE.Math;\n\n  let plane: Mesh; // : Object3D;\n\n  // const SimplexNoiseClass = window.SimplexNoise as SimplexNoise;\n  // @ts-ignore: Wrong type definitions for simplex noise\n  const simplex = new window.SimplexNoise();\n  // const noise4D = createNoise4D();\n\n  const mouse = new THREE.Vector2();\n  const mousePlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\n  // const mousePosition = new THREE.Vector3();\n  // const raycaster = new THREE.Raycaster();\n\n  let light1: PointLight;\n  let light2: PointLight;\n  let light3: PointLight;\n  let light4: PointLight;\n\n  const canvas = document.getElementById(conf.el) as HTMLCanvasElement;\n  const wrapper = document.getElementById(conf.wrapperEl) as HTMLDivElement;\n\n  init();\n\n  function init() {\n    // console.log('[VisualAnimation:init]');\n    renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true,\n      alpha: true,\n    });\n    camera = new THREE.PerspectiveCamera(conf.fov);\n    camera.position.z = conf.cameraZ;\n\n    updateSize();\n    window.addEventListener('resize', updateSize, false);\n\n    if (useInteractve) {\n      document.addEventListener('mousemove', mouseHandler);\n    }\n\n    initScene();\n    // initGui();\n    animate();\n  }\n\n  function mouseHandler(e: MouseEvent) {\n    const v = new THREE.Vector3();\n    camera.getWorldDirection(v);\n    v.normalize();\n    mousePlane.normal = v;\n    mouse.x = (e.clientX / width) * 2 - 1;\n    mouse.y = -(e.clientY / height) * 2 + 1;\n    // raycaster.setFromCamera(mouse, camera);\n    // raycaster.ray.intersectPlane(mousePlane, mousePosition);\n  }\n\n  /* // UNUSED: Input controls\n   * function initGui() {\n   *   noiseInput.value = 101 - conf.xyCoef;\n   *   heightInput.value = (conf.zCoef * 100) / 25;\n   *   // Noise Coef input\n   *   noiseInput.addEventListener('input', (e) => {\n   *     conf.xyCoef = 101 - noiseInput.value;\n   *   });\n   *   // Height Coef input\n   *   heightInput.addEventListener('input', (e) => {\n   *     conf.zCoef = (heightInput.value * 25) / 100;\n   *   });\n   *   // Random colors\n   *   document.getElementById('trigger').addEventListener('click', (e) => {\n   *     setRandomLightsColors();\n   *   });\n   * }\n   */\n\n  function numericColor(s: TColor): number {\n    if (typeof s === 'string') {\n      if (s.startsWith('#')) {\n        s = s.replace('#', '0x');\n      }\n      s = Number(s);\n    }\n    return s;\n  }\n\n  function addLight(color: TColor, lightDistance: number, x: number, y: number, z: number) {\n    const light = new THREE.PointLight(\n      // prettier-ignore\n      numericColor(color),\n      conf.lightIntensity,\n      lightDistance,\n    );\n    light.position.set(x, y, z);\n    scene.add(light);\n    return light;\n  }\n\n  function initScene() {\n    scene = new THREE.Scene();\n    initLights();\n\n    const mat = new THREE.MeshLambertMaterial({ color: 0xffffff, side: THREE.DoubleSide });\n    // let mat = new THREE.MeshPhongMaterial({ color: 0xffffff });\n    // let mat = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\n    const geo = new THREE.PlaneBufferGeometry(wWidth, wHeight, wWidth / 2, wHeight / 2);\n    plane = new THREE.Mesh(geo, mat);\n    scene.add(plane);\n\n    const planeRotationX = -Math.PI / 2 - 0.1; // -Math.PI / 2 - 0.2;\n    const planePositionY = 20; // -25;\n    const cameraPositionZ = 30; // 60;\n    plane.rotation.x = planeRotationX;\n    plane.position.y = planePositionY;\n    camera.position.z = cameraPositionZ;\n    console.log('[VisualAnimation:initScene]', {\n      planeRotationX,\n      planePositionY,\n      cameraPositionZ,\n    });\n  }\n\n  function initLights() {\n    const r = 30; // 30;\n    const y = 10; // 10;\n    const lightDistance = 300; // 500;\n\n    const light = new THREE.AmbientLight(numericColor(conf.ambientColor));\n    scene.add(light);\n\n    light1 = addLight(conf.light1Color, lightDistance, 0, y, r); // Set 1\n    // light2 = addLight(conf.light2Color, lightDistance, 0, -y, -r);\n    light3 = addLight(conf.light3Color, lightDistance, r, y, 0); // Set 1\n    // light4 = addLight(conf.light4Color, lightDistance, -r, y, 0);\n  }\n\n  function animate() {\n    // console.log('[VisualAnimation:animate]');\n\n    animatePlane();\n    animateLights();\n\n    renderer.render(scene, camera);\n\n    setTimeout(() => requestAnimationFrame(animate), 10);\n    // requestAnimationFrame(animate);\n  }\n\n  function animatePlane() {\n    const gArray = plane.geometry.attributes.position.array as number[];\n    const time = Date.now() * 0.0002;\n    /* console.log('[VisualAnimation:animatePlane]', {\n     *   gArray,\n     *   time,\n     * });\n     */\n    for (let i = 0; i < gArray.length; i += 3) {\n      gArray[i + 2] =\n        simplex.noise4D(\n          // prettier-ignore\n          gArray[i] / conf.xyCoef,\n          gArray[i + 1] / conf.xyCoef,\n          time,\n          mouse.x + mouse.y,\n        ) * conf.zCoef;\n    }\n    plane.geometry.attributes.position.needsUpdate = true;\n    // plane.geometry.computeBoundingSphere();\n  }\n\n  function animateLights() {\n    const time = Date.now() * 0.001;\n    const d = 50;\n    if (light1) {\n      light1.position.x = Math.sin(time * 0.1) * d;\n      light1.position.z = Math.cos(time * 0.2) * d;\n    }\n    if (light2) {\n      light2.position.x = Math.cos(time * 0.3) * d;\n      light2.position.z = Math.sin(time * 0.4) * d;\n    }\n    if (light3) {\n      light3.position.x = Math.sin(time * 0.5) * d;\n      light3.position.z = Math.sin(time * 0.6) * d;\n    }\n    if (light4) {\n      light4.position.x = Math.sin(time * 0.7) * d;\n      light4.position.z = Math.cos(time * 0.8) * d;\n    }\n  }\n\n  /* [>* Create random colors <]\n   * function setRandomLightsColors() {\n   *   conf.light1Color = window.chroma.random().hex();\n   *   conf.light2Color = window.chroma.random().hex();\n   *   conf.light3Color = window.chroma.random().hex();\n   *   conf.light4Color = window.chroma.random().hex();\n   *   light1.color = new THREE.Color(conf.light1Color);\n   *   light2.color = new THREE.Color(conf.light2Color);\n   *   light3.color = new THREE.Color(conf.light3Color);\n   *   light4.color = new THREE.Color(conf.light4Color);\n   *   // console.log(conf);\n   * }\n   */\n\n  function updateSize() {\n    const elWidth = wrapper.clientWidth;\n    const elHeight = wrapper.clientHeight;\n    width = elWidth;\n    height = elHeight; // Math.min(Math.max(elHeight, minHeight), maxHeight);\n    if (renderer && camera) {\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      const wsize = getRendererSize();\n      wWidth = wsize[0];\n      wHeight = wsize[1];\n    }\n  }\n\n  function getRendererSize() {\n    const cam = new THREE.PerspectiveCamera(camera.fov, camera.aspect);\n    const vFOV = (cam.fov * Math.PI) / 180;\n    const height = 2 * Math.tan(vFOV / 2) * Math.abs(conf.cameraZ);\n    const width = height * cam.aspect;\n    return [width, height];\n  }\n}\n\nexport function VisualAnimation() {\n  startVisualAnimation(conf);\n}\n","import { TConf } from './TConf';\n\nexport const conf: TConf = {\n  el: 'VisualAnimation',\n  wrapperEl: 'PageVisual',\n\n  fov: 70, // 75,\n  cameraZ: 100, // 75,\n  xyCoef: 250, // 50,\n  zCoef: 15, // 10,\n  lightIntensity: 1, // 0.9,\n\n  ambientColor: '#cc2200', // '#00ff00', // 0x000000,\n\n  /*\n   * // Default colors (convert from hex color string: s/'#\\(.*\\)'/0x\\1/)\n   * light1Color: '#0e09dc',\n   * light2Color: '#1cd1e1',\n   * light3Color: '#18c02c',\n   * light4Color: '#ee3bcf',\n   */\n  // Set 1\n  light1Color: '#4b9e89',\n  light2Color: '#5c75a1',\n  light3Color: '#1418cd',\n  light4Color: '#b9caec',\n};\n"],"names":["conf","renderer","scene","camera","width","height","wWidth","wHeight","plane","light1","light3","THREE","window","simplex","SimplexNoise","mouse","Vector2","canvas","Plane","Vector3","document","getElementById","el","wrapper","wrapperEl","numericColor","s","startsWith","replace","Number","addLight","color","lightDistance","x","y","z","light","PointLight","lightIntensity","position","set","add","animate","time","d","gArray","geometry","attributes","array","Date","now","i","length","noise4D","xyCoef","zCoef","needsUpdate","animatePlane","Math","sin","cos","render","setTimeout","requestAnimationFrame","updateSize","elWidth","clientWidth","elHeight","clientHeight","setSize","aspect","updateProjectionMatrix","wsize","cam","PerspectiveCamera","fov","vFOV","PI","tan","abs","cameraZ","getRendererSize","WebGLRenderer","antialias","alpha","addEventListener","Scene","AmbientLight","ambientColor","light1Color","light3Color","mat","MeshLambertMaterial","side","DoubleSide","geo","PlaneBufferGeometry","Mesh","planeRotationX","rotation","console","log","planePositionY","cameraPositionZ","initScene","startVisualAnimation","light2Color","light4Color"],"sourceRoot":""}